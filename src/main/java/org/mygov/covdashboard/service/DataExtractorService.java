package org.mygov.covdashboard.service;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.mygov.covdashboard.exception.CovDashBoardException;import org.mygov.covdashboard.exception.LambdaExceptionUtil;import org.mygov.covdashboard.model.DashboardEntity;import org.mygov.covdashboard.model.CSVDataModel;import org.mygov.covdashboard.model.DataConvertor;import org.mygov.covdashboard.repository.DashboardRepository;import org.mygov.covdashboard.utility.CsvParser;import org.mygov.covdashboard.utility.HtmlParser;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Service;import javax.annotation.PostConstruct;import java.io.IOException;import java.time.LocalDate;import java.time.format.DateTimeFormatter;import java.util.List;import java.util.Objects;import java.util.concurrent.ForkJoinPool;import java.util.stream.Collectors;@Service@Slf4jpublic class DataExtractorService {	private static final String URL = "https://raw.githubusercontent.com";	@Autowired	HtmlParser htmlParser;	@Autowired	CsvParser csvParser;	@Autowired	DashboardRepository repository;	@Scheduled(cron = "0 0 0 * * *")	public void extractDailyData() {		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy");		LocalDate localDate = LocalDate.now();		String dateString = formatter.format(localDate);		String uri  = "/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{}.csv";		String dateUri = StringUtils.replace(uri, "{}", "02-12-2021");		try {			List<CSVDataModel> modelList = buildModel(URL + dateUri);			List<DashboardEntity> dataEntities = buildEntities(modelList);			repository.saveAll(dataEntities);		} catch (CovDashBoardException e) {			log.error(e.getMessage());		}	}	@PostConstruct	public void extractInitialData() {		List<String> csvList = null;		try {			csvList = htmlParser.getCsvList();		} catch (IOException e) {			log.error("Error while extracting list of csv files. Error: " + e.getMessage());		}		assert csvList != null;		ForkJoinPool customThreadPool = new ForkJoinPool(4);		List<String> finalCsvList = csvList;		try {			customThreadPool.submit(() -> {				buildAndSaveData(finalCsvList);			});		} finally {			customThreadPool.shutdown();		}	}	private void buildAndSaveData(List<String> finalCsvList) {		finalCsvList.parallelStream()				.map(LambdaExceptionUtil.rethrowFunction(uri -> buildModel(URL + uri)))				.filter(Objects::nonNull)				.flatMap(List::stream)				.map(LambdaExceptionUtil.rethrowFunction(DataConvertor.INSTANCE::modelToEntity))				.filter(Objects::nonNull)				.filter( e -> !emptyEntity(e))				.forEach(e -> repository.save(e));	}	private boolean emptyEntity(DashboardEntity entity) {		boolean isEmpty = entity.getActiveCases() == null;		isEmpty = isEmpty && entity.getConfirmedCases() == null;		isEmpty = isEmpty && entity.getNoOfDeaths() == null;		isEmpty = isEmpty && entity.getRecoveredCases() == null;		isEmpty = isEmpty && entity.getLastUpdate() == null;		return isEmpty;	}	private List<CSVDataModel> buildModel(String url) throws CovDashBoardException {		return csvParser.buildCsvDataModel(url);	}	private List<DashboardEntity> buildEntities(List<CSVDataModel> modelList) {		return modelList.parallelStream()				.map(LambdaExceptionUtil.rethrowFunction(DataConvertor.INSTANCE::modelToEntity))				.collect(Collectors.toList());	}}