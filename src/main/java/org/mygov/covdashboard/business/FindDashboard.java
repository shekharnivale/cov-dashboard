package org.mygov.covdashboard.business;import org.mygov.covdashboard.exception.CovDashBoardException;import org.mygov.covdashboard.model.DashboardEntity;import org.mygov.covdashboard.model.DashboardQueryParam;import org.mygov.covdashboard.repository.DashboardRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import javax.persistence.EntityManager;import javax.persistence.TypedQuery;import javax.persistence.criteria.CriteriaBuilder;import javax.persistence.criteria.CriteriaQuery;import javax.persistence.criteria.Predicate;import javax.persistence.criteria.Root;import java.util.ArrayList;import java.util.List;import static org.apache.commons.lang3.StringUtils.*;@Componentpublic class FindDashboard {	@Autowired	private DashboardRepository repository;	@Autowired	private EntityManager entityManager;	public List<DashboardEntity> findDashboard(DashboardQueryParam queryParams) throws CovDashBoardException {		if(emptyParams(queryParams)) {			throw new CovDashBoardException("Data is too large to return.  Please specify country &/or province &/or date");		}		TypedQuery<DashboardEntity> query = entityManager.createQuery(buildQuery(queryParams));		return query.getResultList();	}	private boolean emptyParams(DashboardQueryParam queryParams) {		boolean isEmpty = isAllBlank(queryParams.getCountry());		isEmpty = isEmpty && isAllBlank(queryParams.getProvince());		isEmpty = isEmpty && queryParams.getDate() == null;		return isEmpty;	}	private CriteriaQuery<DashboardEntity> buildQuery(DashboardQueryParam params) {		CriteriaBuilder builder = entityManager.getCriteriaBuilder();		CriteriaQuery<DashboardEntity> query = builder.createQuery(DashboardEntity.class);		Root<DashboardEntity> entityRoot = query.from(DashboardEntity.class);		List<Predicate> predicates = new ArrayList<>();		buildPredicates(params, builder, entityRoot, predicates);		query.where(predicates.toArray(new Predicate[0]));		return query;	}	private void buildPredicates(DashboardQueryParam params, CriteriaBuilder builder, Root<DashboardEntity> dashboardEntityRoot, List<Predicate> predicates) {		if(isNoneBlank(params.getCountry())) {			predicates.add(builder.equal(dashboardEntityRoot.get("countryRegion"), params.getCountry()));		}		if(isNoneBlank(params.getProvince())) {			predicates.add(builder.equal(dashboardEntityRoot.get("provinceState"), params.getProvince()));		}		if(params.getThreshold() != null && params.getThreshold() > 0) {			predicates.add(builder.greaterThan(dashboardEntityRoot.get("activeCases"), params.getThreshold()));		}		if(params.getDate() != null) {			predicates.add(builder.equal(dashboardEntityRoot.get("lastUpdate"), params.getDate()));		}		if(params.getFromDate() != null && params.getToDate() == null) {			predicates.add(builder.greaterThan(dashboardEntityRoot.get("lastUpdate"), params.getFromDate()));		}		if(params.getFromDate() == null && params.getToDate() != null) {			predicates.add(builder.lessThan(dashboardEntityRoot.get("lastUpdate"), params.getToDate()));		}		if(params.getFromDate() != null && params.getToDate() != null) {			predicates.add(builder.between(dashboardEntityRoot.get("lastUpdate"), params.getFromDate(), params.getToDate()));		}	}}