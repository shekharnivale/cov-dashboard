package org.mygov.covdashboard.model;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.mapstruct.*;import org.mapstruct.factory.Mappers;import org.mygov.covdashboard.exception.CovDashBoardException;import java.time.LocalDate;import java.time.format.DateTimeFormatter;@Mapper@Slf4jpublic abstract class DataConvertor {	public static final DataConvertor INSTANCE = Mappers.getMapper(DataConvertor.class);	@Mappings({		@Mapping(source = "country_Region", target = "countryRegion"),		@Mapping(source = "province_State", target = "provinceState"),	})	public abstract DashboardEntity modelToEntity(CSVDataModel model) throws CovDashBoardException;	@AfterMapping	public DashboardEntity updateEntity(CSVDataModel model, @MappingTarget DashboardEntity.DashboardEntityBuilder entityBuilder) throws CovDashBoardException {		DashboardEntity entity =entityBuilder.build();		try{			entity.setLastUpdate(LocalDate.parse(model.getLast_Update(), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));			entity.setConfirmedCases(getIntValue(model.getConfirmed()));			entity.setActiveCases(getIntValue(model.getActive()));			entity.setNoOfDeaths(getIntValue(model.getDeaths()));			entity.setRecoveredCases(getIntValue(model.getRecovered()));			return entity;		} catch (Exception e) {			log.error("Error while parsing model: " + model);			return null;		}	}	private Integer getIntValue(String input) {		if(StringUtils.isNoneBlank(input)) {			return Integer.parseInt(input);		}		return 0;	}}